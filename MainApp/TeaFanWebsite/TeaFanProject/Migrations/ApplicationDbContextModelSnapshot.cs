// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeaFanProject.Data;

namespace TeaFanProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            ConcurrencyStamp = "b4918041-4e12-4254-bd7e-3c29438c9772",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("54ba416f-6b89-4c53-873d-4fbd48506e6d"),
                            ConcurrencyStamp = "a854854e-c99e-43c0-84a4-d445fb88665b",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("61ae2038-97f2-45e5-91ae-08d961fa9be8"),
                            RoleId = new Guid("54ba416f-6b89-4c53-873d-4fbd48506e6d")
                        },
                        new
                        {
                            UserId = new Guid("170ca4bc-ef9f-4de7-ae96-08d962dad25f"),
                            RoleId = new Guid("54ba416f-6b89-4c53-873d-4fbd48506e6d")
                        },
                        new
                        {
                            UserId = new Guid("0dd37c3c-4694-429e-623b-08d962dbded7"),
                            RoleId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc")
                        },
                        new
                        {
                            UserId = new Guid("50892ac9-ebe0-4c8d-f28e-08d9638e12dc"),
                            RoleId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TeaFanProject.Entities.Brand", b =>
                {
                    b.Property<int>("BrandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandID");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandID = 5,
                            BrandName = "Art of Tea",
                            Origin = "Japan"
                        },
                        new
                        {
                            BrandID = 1,
                            BrandName = "Art of Tea",
                            Origin = "China"
                        },
                        new
                        {
                            BrandID = 2,
                            BrandName = "Art of Tea",
                            Origin = "India"
                        },
                        new
                        {
                            BrandID = 3,
                            BrandName = "Art of Tea",
                            Origin = "Taiwan"
                        },
                        new
                        {
                            BrandID = 4,
                            BrandName = "Art of Tea",
                            Origin = "Egypt"
                        });
                });

            modelBuilder.Entity("TeaFanProject.Entities.Cart", b =>
                {
                    b.Property<int>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 9, 14, 19, 7, 30, 994, DateTimeKind.Local).AddTicks(3927));

                    b.Property<double>("ShippingPrice")
                        .HasColumnType("float");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartID");

                    b.HasIndex("UserID");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("TeaFanProject.Entities.CartDetail", b =>
                {
                    b.Property<int>("CartDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("SoldPrice")
                        .HasColumnType("float");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("CartDetailID");

                    b.HasIndex("CartID");

                    b.HasIndex("ProductID");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("TeaFanProject.Entities.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsTypeOfTea")
                        .HasColumnType("bit");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 4,
                            CategoryName = "Tea",
                            IsTypeOfTea = false
                        },
                        new
                        {
                            CategoryID = 1,
                            CategoryName = "Packaged",
                            IsTypeOfTea = false
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryName = "Teaware",
                            IsTypeOfTea = false
                        },
                        new
                        {
                            CategoryID = 3,
                            CategoryName = "Gift",
                            IsTypeOfTea = false
                        });
                });

            modelBuilder.Entity("TeaFanProject.Entities.Demension", b =>
                {
                    b.Property<int>("DemensionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DemensionName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("DemensionID");

                    b.ToTable("Demensions");

                    b.HasData(
                        new
                        {
                            DemensionID = 1,
                            DemensionName = "Capacity"
                        });
                });

            modelBuilder.Entity("TeaFanProject.Entities.Flavor", b =>
                {
                    b.Property<int>("FlavorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FlavorName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("FlavorID");

                    b.ToTable("Flavors");

                    b.HasData(
                        new
                        {
                            FlavorID = 10,
                            FlavorName = "Sweet"
                        },
                        new
                        {
                            FlavorID = 1,
                            FlavorName = "Citrus"
                        },
                        new
                        {
                            FlavorID = 2,
                            FlavorName = "Smooth"
                        },
                        new
                        {
                            FlavorID = 3,
                            FlavorName = "Floral"
                        },
                        new
                        {
                            FlavorID = 4,
                            FlavorName = "Fruity"
                        },
                        new
                        {
                            FlavorID = 5,
                            FlavorName = "Spice"
                        },
                        new
                        {
                            FlavorID = 6,
                            FlavorName = "Minty"
                        },
                        new
                        {
                            FlavorID = 7,
                            FlavorName = "Round"
                        },
                        new
                        {
                            FlavorID = 8,
                            FlavorName = "Grassy"
                        },
                        new
                        {
                            FlavorID = 9,
                            FlavorName = "Fresh"
                        });
                });

            modelBuilder.Entity("TeaFanProject.Entities.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDisable")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<double>("SalePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int>("TypeID")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.HasIndex("BrandID");

                    b.HasIndex("TypeID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = 7,
                            BrandID = 5,
                            Description = "Searching for sore throat tea or tea for throat you are on right place. Our Throat Therapy Tea designed to coat your throat and get you back on stage. Order it today!",
                            IsDisable = false,
                            Price = 27.0,
                            ProductName = "Throat Therapy",
                            Quantity = 50,
                            SalePrice = 27.0,
                            TypeID = 3
                        },
                        new
                        {
                            ProductID = 1,
                            BrandID = 5,
                            Description = "We've taken the guesswork out of measuring out the perfect pitcher of iced tea with convenient biodegradable iced tea pouches. Drop one bag into your 2 quart iced tea pitcher, fill with the appropriate amount of water and you're good to go! \n Blue Pineapple Tea \n Unique and delightful, our Blue Pineapple iced tea is the perfect summer sip. This tea brings together notes of lychee and citrus with organic lemongrass and sweet pineapple for a truly unforgettable cup of tea. For added fun, this breathtaking blend brews a deep blue color that undergoes a magical transformation with a squeeze of fresh citrus! \n Comes in packs of 4 pouches. \n Please note that the brewed color will range in various hues of blue/teal depending on your chosen steep time and temperature.",
                            IsDisable = false,
                            Price = 11.0,
                            ProductName = "Blue Pineapple Tea",
                            Quantity = 50,
                            SalePrice = 11.0,
                            TypeID = 9
                        },
                        new
                        {
                            ProductID = 2,
                            BrandID = 5,
                            Description = "The same great Matcha blend in our Matchasticks is now available in a 40-gram Matcha tin! Perfect for at-home use. We are so excited to finally be offering this best selling Matcha blend in a new package just for you. \n New to our Ceremonial Grade Matcha blend? Our organic ceremonial grade matcha has been ground and packed at origin in Japan to lock in the ultimate freshness. A blend of 3 different green tea varietals, our Ceremonial Grade Matcha is delicious hot or cold brewed. \n This Matcha is 100% pure and it is delicious even when prepared with just filtered water! With light, refreshing, and smooth tasting notes, this Matcha blend is certain to delight all of your senses.",
                            IsDisable = false,
                            Price = 50.0,
                            ProductName = "Art of Tea Ceremonial Grade Matcha Tin",
                            Quantity = 50,
                            SalePrice = 45.0,
                            TypeID = 4
                        },
                        new
                        {
                            ProductID = 3,
                            BrandID = 5,
                            Description = "This hand-carved original cast iron teapot in the Northern Japan-style combines timeless craftsmanship with modern technology to ensure a long-lasting quality teapot. A beautiful insignia on the lower part of the teapot distinguishes the teapot's authenticity and superior quality.",
                            IsDisable = false,
                            Price = 150.0,
                            ProductName = "Tetsubin Cast Iron Tea Pot",
                            Quantity = 50,
                            SalePrice = 125.0,
                            TypeID = 14
                        },
                        new
                        {
                            ProductID = 4,
                            BrandID = 5,
                            Description = "Made by W/R/F Lab in Southern California, this handmade Ceramic Mug holds about 12oz of your tea of choice. The mug is handcrafted and hand-glazed with a modern color block design. Please note that every single mug is hand-produced in the W/R/F studio and is one-of-a-kind.",
                            IsDisable = false,
                            Price = 32.0,
                            ProductName = "Ceramic Mug",
                            Quantity = 50,
                            SalePrice = 32.0,
                            TypeID = 14
                        },
                        new
                        {
                            ProductID = 5,
                            BrandID = 3,
                            Description = "A delectable medley with an enticing floral aroma. Rose Black combines loose leaf black tea with smooth notes of rose and a bright finish. Rose Black is delicious hot or cold brewed and poured over ice. The perfect sip for any time of day.",
                            IsDisable = false,
                            Price = 21.0,
                            ProductName = "Rose Black Tea",
                            Quantity = 50,
                            SalePrice = 21.0,
                            TypeID = 10
                        },
                        new
                        {
                            ProductID = 6,
                            BrandID = 3,
                            Description = "Endurance blend is comprised of adaptogenic herbs that are traditionally used for increasing stamina. This organic energy tea was developed to condition the body by neutralizing the harmful effects of free radicals, oxygenating the blood, promoting circulation, and increasing the body's overall resilience for a quicker recovery.",
                            IsDisable = false,
                            Price = 28.0,
                            ProductName = "Endurance Tea (Pu-erh, Ashwaganda, + Oatstraw Tea)",
                            Quantity = 50,
                            SalePrice = 28.0,
                            TypeID = 10
                        });
                });

            modelBuilder.Entity("TeaFanProject.Entities.ProductImage", b =>
                {
                    b.Property<int>("ImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("ImageID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            ImageID = 19,
                            ImageLink = "/Images/TP000/0.jpg",
                            ProductID = 7
                        },
                        new
                        {
                            ImageID = 1,
                            ImageLink = "/Images/TP001/0.jpg",
                            ProductID = 1
                        },
                        new
                        {
                            ImageID = 2,
                            ImageLink = "/Images/TP001/1.jpg",
                            ProductID = 1
                        },
                        new
                        {
                            ImageID = 3,
                            ImageLink = "/Images/TP002/0.jpg",
                            ProductID = 2
                        },
                        new
                        {
                            ImageID = 4,
                            ImageLink = "/Images/TP002/1.jpg",
                            ProductID = 2
                        },
                        new
                        {
                            ImageID = 5,
                            ImageLink = "/Images/TP002/2.jpg",
                            ProductID = 2
                        },
                        new
                        {
                            ImageID = 6,
                            ImageLink = "/Images/TP002/3.jpg",
                            ProductID = 2
                        },
                        new
                        {
                            ImageID = 7,
                            ImageLink = "/Images/TP002/4.jpg",
                            ProductID = 2
                        },
                        new
                        {
                            ImageID = 8,
                            ImageLink = "/Images/TP003/0.jpg",
                            ProductID = 3
                        },
                        new
                        {
                            ImageID = 9,
                            ImageLink = "/Images/TP003/1.jpg",
                            ProductID = 3
                        },
                        new
                        {
                            ImageID = 10,
                            ImageLink = "/Images/TP004/0.jpg",
                            ProductID = 4
                        },
                        new
                        {
                            ImageID = 11,
                            ImageLink = "/Images/TP004/1.jpg",
                            ProductID = 4
                        },
                        new
                        {
                            ImageID = 12,
                            ImageLink = "/Images/TP004/2.png",
                            ProductID = 4
                        },
                        new
                        {
                            ImageID = 13,
                            ImageLink = "/Images/TP005/0.jpg",
                            ProductID = 5
                        },
                        new
                        {
                            ImageID = 14,
                            ImageLink = "/Images/TP005/1.png",
                            ProductID = 5
                        },
                        new
                        {
                            ImageID = 15,
                            ImageLink = "/Images/TP005/2.jpg",
                            ProductID = 5
                        },
                        new
                        {
                            ImageID = 16,
                            ImageLink = "/Images/TP005/3.jpg",
                            ProductID = 5
                        },
                        new
                        {
                            ImageID = 17,
                            ImageLink = "/Images/TP006/0.jpg",
                            ProductID = 6
                        },
                        new
                        {
                            ImageID = 18,
                            ImageLink = "/Images/TP006/1.jpg",
                            ProductID = 6
                        });
                });

            modelBuilder.Entity("TeaFanProject.Entities.ProductOther", b =>
                {
                    b.Property<int>("ProductOtherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CareInstruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("ProductOtherID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductOthers");

                    b.HasData(
                        new
                        {
                            ProductOtherID = 2,
                            CareInstruction = "Not suitable for stove top use Hand-wash only",
                            Color = "Black",
                            Material = "Cast Iron",
                            ProductID = 3
                        },
                        new
                        {
                            ProductOtherID = 1,
                            CareInstruction = "Hand Wash",
                            Color = "Cream",
                            Material = "Ceramic",
                            ProductID = 4
                        });
                });

            modelBuilder.Entity("TeaFanProject.Entities.ProductOtherDemension", b =>
                {
                    b.Property<int>("ProductOtherDemensionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DemensionID")
                        .HasColumnType("int");

                    b.Property<int>("ProductOtherID")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.HasKey("ProductOtherDemensionID");

                    b.HasIndex("DemensionID");

                    b.HasIndex("ProductOtherID");

                    b.ToTable("ProductOtherDemensions");

                    b.HasData(
                        new
                        {
                            ProductOtherDemensionID = 2,
                            DemensionID = 1,
                            ProductOtherID = 2,
                            Unit = "oz",
                            Value = 16.0
                        },
                        new
                        {
                            ProductOtherDemensionID = 1,
                            DemensionID = 1,
                            ProductOtherID = 1,
                            Unit = "oz",
                            Value = 12.0
                        });
                });

            modelBuilder.Entity("TeaFanProject.Entities.ProductTea", b =>
                {
                    b.Property<int>("ProductTeaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ingredients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("ServingSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteepTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaterTemperature")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductTeaID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductTeas");

                    b.HasData(
                        new
                        {
                            ProductTeaID = 5,
                            Ingredients = "Organic Ginger, Organic Peppermint, Organic Licorice, Organic Orange Peel, Organic Fennel, Organic Marshmallow Leaf, Organic Clove, Organic Echinacea",
                            ProductID = 7,
                            ServingSize = "1 Tbsp/8 Oz",
                            SteepTime = "5-7 Min",
                            WaterTemperature = "206"
                        },
                        new
                        {
                            ProductTeaID = 1,
                            Ingredients = "Organic Lemongrass, Ginger, Oolong Tea, Pineapple Bits, Blue Butterfly Pea, Stevia Leaf, Natural flavors",
                            ProductID = 1,
                            ServingSize = "1 Pouch/2 QT",
                            SteepTime = "4-5 Min",
                            WaterTemperature = "185-206"
                        },
                        new
                        {
                            ProductTeaID = 2,
                            Ingredients = "Organic Japanese Ceremonial Grade Matcha",
                            ProductID = 2,
                            ServingSize = "1 Tsp",
                            SteepTime = "20 Second Shake Or Whisk",
                            WaterTemperature = "180"
                        },
                        new
                        {
                            ProductTeaID = 3,
                            Ingredients = "Black Tea, Rose petals, Natural Flavors",
                            ProductID = 5,
                            ServingSize = "1 Tsp/8oz",
                            SteepTime = "3-5 Min",
                            WaterTemperature = "206"
                        },
                        new
                        {
                            ProductTeaID = 4,
                            Ingredients = "Organic Cinnamon, Organic Pu-erh, Organic Eleuthro Root, Organic Goji Berries, Organic Schizandra Berries, Organic Nettle Leaf, Organic Oatstraw, Organic Ashwaganda Root, Natural Flavors",
                            ProductID = 6,
                            ServingSize = "1 Tsp/8oz",
                            SteepTime = "3-5 Min",
                            WaterTemperature = "195"
                        });
                });

            modelBuilder.Entity("TeaFanProject.Entities.ProductTeaFlavor", b =>
                {
                    b.Property<int>("ProductTeaFlavorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FlavorID")
                        .HasColumnType("int");

                    b.Property<int>("ProductTeaID")
                        .HasColumnType("int");

                    b.HasKey("ProductTeaFlavorID");

                    b.HasIndex("FlavorID");

                    b.HasIndex("ProductTeaID");

                    b.ToTable("ProductTeaFlavors");

                    b.HasData(
                        new
                        {
                            ProductTeaFlavorID = 11,
                            FlavorID = 1,
                            ProductTeaID = 5
                        },
                        new
                        {
                            ProductTeaFlavorID = 1,
                            FlavorID = 2,
                            ProductTeaID = 5
                        },
                        new
                        {
                            ProductTeaFlavorID = 2,
                            FlavorID = 6,
                            ProductTeaID = 5
                        },
                        new
                        {
                            ProductTeaFlavorID = 3,
                            FlavorID = 1,
                            ProductTeaID = 1
                        },
                        new
                        {
                            ProductTeaFlavorID = 4,
                            FlavorID = 4,
                            ProductTeaID = 1
                        },
                        new
                        {
                            ProductTeaFlavorID = 5,
                            FlavorID = 2,
                            ProductTeaID = 2
                        },
                        new
                        {
                            ProductTeaFlavorID = 6,
                            FlavorID = 9,
                            ProductTeaID = 2
                        },
                        new
                        {
                            ProductTeaFlavorID = 7,
                            FlavorID = 2,
                            ProductTeaID = 3
                        },
                        new
                        {
                            ProductTeaFlavorID = 8,
                            FlavorID = 3,
                            ProductTeaID = 3
                        },
                        new
                        {
                            ProductTeaFlavorID = 9,
                            FlavorID = 4,
                            ProductTeaID = 4
                        },
                        new
                        {
                            ProductTeaFlavorID = 10,
                            FlavorID = 7,
                            ProductTeaID = 4
                        });
                });

            modelBuilder.Entity("TeaFanProject.Entities.ProductType", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("MyProperty")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("TypeID");

                    b.HasIndex("CategoryID");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            TypeID = 26,
                            CategoryID = 4,
                            MyProperty = 0,
                            TypeName = "Loose Leaf Teas"
                        },
                        new
                        {
                            TypeID = 1,
                            CategoryID = 4,
                            MyProperty = 0,
                            TypeName = "Art of Tea Blends"
                        },
                        new
                        {
                            TypeID = 2,
                            CategoryID = 4,
                            MyProperty = 0,
                            TypeName = "Organic Tea Blends"
                        },
                        new
                        {
                            TypeID = 3,
                            CategoryID = 4,
                            MyProperty = 0,
                            TypeName = "Caffeine Free"
                        },
                        new
                        {
                            TypeID = 4,
                            CategoryID = 4,
                            MyProperty = 0,
                            TypeName = "Green Tea"
                        },
                        new
                        {
                            TypeID = 5,
                            CategoryID = 4,
                            MyProperty = 0,
                            TypeName = "Black Tea"
                        },
                        new
                        {
                            TypeID = 6,
                            CategoryID = 4,
                            MyProperty = 0,
                            TypeName = "Tea Gifts"
                        },
                        new
                        {
                            TypeID = 7,
                            CategoryID = 1,
                            MyProperty = 0,
                            TypeName = "Packaged Tea Collection"
                        },
                        new
                        {
                            TypeID = 8,
                            CategoryID = 1,
                            MyProperty = 0,
                            TypeName = "Pyramid Sachets"
                        },
                        new
                        {
                            TypeID = 9,
                            CategoryID = 1,
                            MyProperty = 0,
                            TypeName = "Organic Tea Blends"
                        },
                        new
                        {
                            TypeID = 10,
                            CategoryID = 1,
                            MyProperty = 0,
                            TypeName = "Art of Tea Blends"
                        },
                        new
                        {
                            TypeID = 11,
                            CategoryID = 1,
                            MyProperty = 0,
                            TypeName = "Caffeine Free"
                        },
                        new
                        {
                            TypeID = 12,
                            CategoryID = 1,
                            MyProperty = 0,
                            TypeName = "Green Tea"
                        },
                        new
                        {
                            TypeID = 13,
                            CategoryID = 1,
                            MyProperty = 0,
                            TypeName = "Black Tea"
                        },
                        new
                        {
                            TypeID = 14,
                            CategoryID = 2,
                            MyProperty = 0,
                            TypeName = "Teaware"
                        },
                        new
                        {
                            TypeID = 15,
                            CategoryID = 2,
                            MyProperty = 0,
                            TypeName = "Ritual Collection"
                        },
                        new
                        {
                            TypeID = 16,
                            CategoryID = 2,
                            MyProperty = 0,
                            TypeName = "Iced Tea"
                        },
                        new
                        {
                            TypeID = 17,
                            CategoryID = 2,
                            MyProperty = 0,
                            TypeName = "Tea Gifts"
                        },
                        new
                        {
                            TypeID = 18,
                            CategoryID = 2,
                            MyProperty = 0,
                            TypeName = "Matcha"
                        },
                        new
                        {
                            TypeID = 19,
                            CategoryID = 2,
                            MyProperty = 0,
                            TypeName = "Filter Bags"
                        },
                        new
                        {
                            TypeID = 20,
                            CategoryID = 3,
                            MyProperty = 0,
                            TypeName = "Tea Gifts"
                        },
                        new
                        {
                            TypeID = 21,
                            CategoryID = 3,
                            MyProperty = 0,
                            TypeName = "Tea of the Month"
                        },
                        new
                        {
                            TypeID = 22,
                            CategoryID = 3,
                            MyProperty = 0,
                            TypeName = "Ritual Collection"
                        },
                        new
                        {
                            TypeID = 23,
                            CategoryID = 3,
                            MyProperty = 0,
                            TypeName = "Sampler Packs"
                        },
                        new
                        {
                            TypeID = 24,
                            CategoryID = 3,
                            MyProperty = 0,
                            TypeName = "Teaware"
                        },
                        new
                        {
                            TypeID = 25,
                            CategoryID = 3,
                            MyProperty = 0,
                            TypeName = "Loose Leaf Teas"
                        });
                });

            modelBuilder.Entity("TeaFanProject.Entities.Rating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("StarCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RatingID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("TeaFanProject.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("61ae2038-97f2-45e5-91ae-08d961fa9be8"),
                            AccessFailedCount = 0,
                            Address = "22 St. Wall Street, Brooklyn, American",
                            ConcurrencyStamp = "1c6ef8b4-8a2c-48af-84d6-ba0b02df3260",
                            CreatedDate = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "annalee@teafan.com",
                            EmailConfirmed = false,
                            FirstName = "Anna",
                            LastName = "Lee",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "annalee@teafan.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEMBztXMi6kpmZTII05aDAgFfJoobKGOnHOKYA5dbpxUikjew1q/8ogHWL/WgjuGu1A==",
                            PhoneNumber = "012545454541",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7NG4A7DTOJ5DETPA35OHKTOZMMYP",
                            TwoFactorEnabled = false,
                            UserName = "annalee@teafan.com"
                        },
                        new
                        {
                            Id = new Guid("170ca4bc-ef9f-4de7-ae96-08d962dad25f"),
                            AccessFailedCount = 0,
                            Address = "22 St. Wall Street, Brooklyn, American",
                            ConcurrencyStamp = "a76637cc-fb86-4457-829a-f5975998cd62",
                            CreatedDate = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "chungha@teafan.com",
                            EmailConfirmed = false,
                            FirstName = "Chung",
                            LastName = "Ha",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "chungha@teafan.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEBpHiIM4leySeSwV5rSWCuRQyg3VTwUlYyHw+nnB2mYnfD5velQh38NVoZxs7bJPqw==",
                            PhoneNumber = "012545454541",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7NG4A7DTOJ5DETPA35OHKTOZMMYP",
                            TwoFactorEnabled = false,
                            UserName = "chungha@teafan.com"
                        },
                        new
                        {
                            Id = new Guid("0dd37c3c-4694-429e-623b-08d962dbded7"),
                            AccessFailedCount = 0,
                            Address = "22 St. Wall Street, Brooklyn, American",
                            ConcurrencyStamp = "56dd63a8-76a9-42e6-8fe2-a0eeb8bb1d59",
                            CreatedDate = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "quangdai@teafan.com",
                            EmailConfirmed = false,
                            FirstName = "Dai",
                            LastName = "Quang",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "quangdai@teafan.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEFJHYZq/jKXsdqH4VGGg+XTEcmdfMKWynRaj44cWLK5agBNgyU+bif/0ZxKBb/MaMw==",
                            PhoneNumber = "012545454541",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7NG4A7DTOJ5DETPA35OHKTOZMMYP",
                            TwoFactorEnabled = false,
                            UserName = "quangdai@teafan.com"
                        },
                        new
                        {
                            Id = new Guid("50892ac9-ebe0-4c8d-f28e-08d9638e12dc"),
                            AccessFailedCount = 0,
                            Address = "22 St. Wall Street, Brooklyn, American",
                            ConcurrencyStamp = "b73ab2ef-db8e-45a3-9420-2b654eac9cd2",
                            CreatedDate = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "suongnhi@teafan.com",
                            EmailConfirmed = false,
                            FirstName = "Suong",
                            LastName = "Nhi",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedUserName = "suongnhi@teafan.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELTyCCKzmWGQwWSd8PWmDTtnBU7fiuZB2F0GHlUJiVayvnhRmaVxP5OfdWC2Si3aBQ==",
                            PhoneNumber = "012545454541",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQLC7NG4A7DTOJ5DETPA35OHKTOZMMYP",
                            TwoFactorEnabled = false,
                            UserName = "suongnhi@teafan.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TeaFanProject.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TeaFanProject.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeaFanProject.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TeaFanProject.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeaFanProject.Entities.Cart", b =>
                {
                    b.HasOne("TeaFanProject.Entities.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeaFanProject.Entities.CartDetail", b =>
                {
                    b.HasOne("TeaFanProject.Entities.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeaFanProject.Entities.Product", "Product")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TeaFanProject.Entities.Product", b =>
                {
                    b.HasOne("TeaFanProject.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeaFanProject.Entities.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("TeaFanProject.Entities.ProductImage", b =>
                {
                    b.HasOne("TeaFanProject.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TeaFanProject.Entities.ProductOther", b =>
                {
                    b.HasOne("TeaFanProject.Entities.Product", "Product")
                        .WithMany("ProductOthers")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TeaFanProject.Entities.ProductOtherDemension", b =>
                {
                    b.HasOne("TeaFanProject.Entities.Demension", "Demension")
                        .WithMany("OtherDemensions")
                        .HasForeignKey("DemensionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeaFanProject.Entities.ProductOther", "ProductOther")
                        .WithMany("ProductOtherDemensions")
                        .HasForeignKey("ProductOtherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demension");

                    b.Navigation("ProductOther");
                });

            modelBuilder.Entity("TeaFanProject.Entities.ProductTea", b =>
                {
                    b.HasOne("TeaFanProject.Entities.Product", "Product")
                        .WithMany("ProductTeas")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TeaFanProject.Entities.ProductTeaFlavor", b =>
                {
                    b.HasOne("TeaFanProject.Entities.Flavor", "Flavor")
                        .WithMany("ProductTeaFlavors")
                        .HasForeignKey("FlavorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeaFanProject.Entities.ProductTea", "ProductTea")
                        .WithMany("ProductTeaFlavors")
                        .HasForeignKey("ProductTeaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flavor");

                    b.Navigation("ProductTea");
                });

            modelBuilder.Entity("TeaFanProject.Entities.ProductType", b =>
                {
                    b.HasOne("TeaFanProject.Entities.Category", "Category")
                        .WithMany("ProductTypes")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TeaFanProject.Entities.Rating", b =>
                {
                    b.HasOne("TeaFanProject.Entities.Product", "Product")
                        .WithMany("Ratings")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeaFanProject.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeaFanProject.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TeaFanProject.Entities.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("TeaFanProject.Entities.Category", b =>
                {
                    b.Navigation("ProductTypes");
                });

            modelBuilder.Entity("TeaFanProject.Entities.Demension", b =>
                {
                    b.Navigation("OtherDemensions");
                });

            modelBuilder.Entity("TeaFanProject.Entities.Flavor", b =>
                {
                    b.Navigation("ProductTeaFlavors");
                });

            modelBuilder.Entity("TeaFanProject.Entities.Product", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductOthers");

                    b.Navigation("ProductTeas");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("TeaFanProject.Entities.ProductOther", b =>
                {
                    b.Navigation("ProductOtherDemensions");
                });

            modelBuilder.Entity("TeaFanProject.Entities.ProductTea", b =>
                {
                    b.Navigation("ProductTeaFlavors");
                });

            modelBuilder.Entity("TeaFanProject.Entities.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TeaFanProject.Entities.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
